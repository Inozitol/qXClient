#include "strswitch.h"

#include <QHash>
#include <QByteArray>
#include <QDebug>

const QHash<QByteArray,IntFromString> map_word2int = {
    {R"(invalid)",IntFromString::invalid},
    {R"(stream)",IntFromString::stream},
    {R"(features)",IntFromString::features},
    {R"(starttls)",IntFromString::starttls},
    {R"(mechanisms)",IntFromString::mechanisms},
    {R"(mechanism)",IntFromString::mechanism},
    {R"(required)",IntFromString::required},
    {R"(proceed)",IntFromString::proceed},
    {R"(challenge)",IntFromString::challenge},
    {R"(success)",IntFromString::success},
    {R"(bind)",IntFromString::bind},
    {R"(iq)",IntFromString::iq},
    {R"(message)",IntFromString::message},
    {R"(presence)",IntFromString::presence},
    {R"(to)",IntFromString::to},
    {R"(from)",IntFromString::from},
    {R"(id)",IntFromString::id},
    {R"(type)",IntFromString::type},
    {R"(lang)",IntFromString::lang},
    {R"(result)",IntFromString::result},
    {R"(error)",IntFromString::error},
    {R"(show)",IntFromString::show},
    {R"(status)",IntFromString::status},
    {R"(priority)",IntFromString::priority},
    {R"(body)",IntFromString::body},
    {R"(subject)",IntFromString::subject},
    {R"(thread)",IntFromString::thread},
    {R"(sm)",IntFromString::sm},
    {R"(a)",IntFromString::a},
    {R"(r)",IntFromString::r},
    {R"(enabled)",IntFromString::enabled},
    {R"(delay)",IntFromString::delay},
    {R"(urn:ietf:params:xml:ns:vcard-4.0)",IntFromString::ns_xml_vcard40},
    {R"(urn:xmpp:pep-vcard-conversion:0)",IntFromString::ns_xmpp_pep_vcard_conversion_0},
    {R"(urn:xmpp:mam:2)",IntFromString::ns_xmpp_mam_2},
    {R"(urn:xmpp:sid:0)",IntFromString::ns_xmpp_sid_0},
    {R"(dnssrv)",IntFromString::dnssrv},
    {R"(fullunicode)",IntFromString::fullunicode},
    {R"(gc-1.0)",IntFromString::gc_10},
    {R"(http://jabber.org/protocol/activity)",IntFromString::http_jabber_activity},
    {R"(http://jabber.org/protocol/address)",IntFromString::http_jabber_address},
    {R"(http://jabber.org/protocol/amp)",IntFromString::http_jabber_amp},
    {R"(http://jabber.org/protocol/amp#errors)",IntFromString::http_jabber_amp_errors},
    {R"(http://jabber.org/protocol/amp?action=alert)",IntFromString::http_jabber_amp_action_alert},
    {R"(http://jabber.org/protocol/amp?action=drop)",IntFromString::http_jabber_amp_action_drop},
    {R"(http://jabber.org/protocol/amp?action=error)",IntFromString::http_jabber_amp_action_error},
    {R"(http://jabber.org/protocol/amp?action=notify)",IntFromString::http_jabber_amp_action_notify},
    {R"(http://jabber.org/protocol/amp?condition=deliver)",IntFromString::http_jabber_amp_condition_deliver},
    {R"(http://jabber.org/protocol/amp?condition=expire-at)",IntFromString::http_jabber_amp_condition_expire_at},
    {R"(http://jabber.org/protocol/amp?condition=match-resource)",IntFromString::http_jabber_amp_condition_match_resources},
    {R"(http://jabber.org/protocol/bytestreams)",IntFromString::http_jabber_bytestreams},
    {R"(http://jabber.org/protocol/bytestreams#udp)",IntFromString::http_jabber_bytestreams_udp},
    {R"(http://jabber.org/protocol/caps)",IntFromString::http_jabber_caps},
    {R"(http://jabber.org/protocol/caps#optimize)",IntFromString::http_jabber_caps_optimize},
    {R"(http://jabber.org/protocol/chatstates)",IntFromString::http_jabber_chatstates},
    {R"(http://jabber.org/protocol/commands)",IntFromString::http_jabber_commands},
    {R"(http://jabber.org/protocol/compress)",IntFromString::http_jabber_compress},
    {R"(http://jabber.org/protocol/disco#info)",IntFromString::http_jabber_disco_info},
    {R"(http://jabber.org/protocol/disco#items)",IntFromString::http_jabber_disco_items},
    {R"(http://jabber.org/protocol/feature-neg)",IntFromString::http_jabber_featureneg},
    {R"(http://jabber.org/protocol/geoloc)",IntFromString::http_jabber_geoloc},
    {R"(http://jabber.org/protocol/http-auth)",IntFromString::http_jabber_httpauth},
    {R"(http://jabber.org/protocol/httpbind)",IntFromString::http_jabber_httpbind},
    {R"(http://jabber.org/protocol/muc)",IntFromString::http_jabber_muc},
    {R"(http://jabber.org/protocol/muc#admin)",IntFromString::http_jabber_muc_admin},
    {R"(http://jabber.org/protocol/muc#owner)",IntFromString::http_jabber_muc_owner},
    {R"(http://jabber.org/protocol/muc#register)",IntFromString::http_jabber_muc_register},
    {R"(http://jabber.org/protocol/muc#roomconfig)",IntFromString::http_jabber_muc_roomconfig},
    {R"(http://jabber.org/protocol/muc#user)",IntFromString::http_jabber_muc_user},
    {R"(http://jabber.org/protocol/offline)",IntFromString::http_jabber_offline},
    {R"(http://jabber.org/protocol/pubsub#access-authorize)",IntFromString::http_jabber_pubsub_access_authorize},
    {R"(http://jabber.org/protocol/pubsub#access-open)",IntFromString::http_jabber_pubsub_access_open},
    {R"(http://jabber.org/protocol/pubsub#access-presence)",IntFromString::http_jabber_pubsub_access_presence},
    {R"(http://jabber.org/protocol/pubsub#access-roster)",IntFromString::http_jabber_pubsub_access_roster},
    {R"(http://jabber.org/protocol/pubsub#access-whitelist)",IntFromString::http_jabber_pubsub_access_whitelist},
    {R"(http://jabber.org/protocol/pubsub#auto-create)",IntFromString::http_jabber_pubsub_auto_create},
    {R"(http://jabber.org/protocol/pubsub#auto-subscribe)",IntFromString::http_jabber_pubsub_auto_subscribe},
    {R"(http://jabber.org/protocol/pubsub#collections)",IntFromString::http_jabber_pubsub_collections},
    {R"(http://jabber.org/protocol/pubsub#config-node)",IntFromString::http_jabber_pubsub_config_node},
    {R"(http://jabber.org/protocol/pubsub#create-and-configure)",IntFromString::http_jabber_pubsub_config_node},
    {R"(http://jabber.org/protocol/pubsub#create-nodes)",IntFromString::http_jabber_pubsub_create_nodes},
    {R"(http://jabber.org/protocol/pubsub#delete-any)",IntFromString::http_jabber_pubsub_delete_any},
    {R"(http://jabber.org/protocol/pubsub#delete-nodes)",IntFromString::http_jabber_pubsub_delete_nodes},
    {R"(http://jabber.org/protocol/pubsub#filtered-notifications)",IntFromString::http_jabber_pubsub_filtered_notifications},
    {R"(http://jabber.org/protocol/pubsub#get-pending)",IntFromString::http_jabber_pubsub_get_pending},
    {R"(http://jabber.org/protocol/pubsub#instant-nodes)",IntFromString::http_jabber_pubsub_instant_nodes},
    {R"(http://jabber.org/protocol/pubsub#item-ids)",IntFromString::http_jabber_pubsub_item_ids},
    {R"(http://jabber.org/protocol/pubsub#last-published)",IntFromString::http_jabber_pubsub_last_published},
    {R"(http://jabber.org/protocol/pubsub#leased-subscription)",IntFromString::http_jabber_pubsub_leased_subscription},
    {R"(http://jabber.org/protocol/pubsub#manage-subscription)",IntFromString::http_jabber_pubsub_manage_subscribtion},
    {R"(http://jabber.org/protocol/pubsub#member-affiliation)",IntFromString::http_jabber_pubsub_member_affiliation},
    {R"(http://jabber.org/protocol/pubsub#meta-data)",IntFromString::http_jabber_pubsub_meta_data},
    {R"(http://jabber.org/protocol/pubsub#modify-affiliations)",IntFromString::http_jabber_pubsub_modify_affiliations},
    {R"(http://jabber.org/protocol/pubsub#multi-collection)",IntFromString::http_jabber_pubsub_multi_collection},
    {R"(http://jabber.org/protocol/pubsub#multi-subscribe)",IntFromString::http_jabber_pubsub_multi_subscribe},
    {R"(http://jabber.org/protocol/pubsub#outcast-affiliation)",IntFromString::http_jabber_pubsub_outcast_affiliation},
    {R"(http://jabber.org/protocol/pubsub#persistent-items)",IntFromString::http_jabber_pubsub_persistent_items},
    {R"(http://jabber.org/protocol/pubsub#presence-notifications)",IntFromString::http_jabber_pubsub_presence_notifications},
    {R"(http://jabber.org/protocol/pubsub#presence-subscribe)",IntFromString::http_jabber_pubsub_presence_subscribe},
    {R"(http://jabber.org/protocol/pubsub#publish)",IntFromString::http_jabber_pubsub_publish},
    {R"(http://jabber.org/protocol/pubsub#publish-options)",IntFromString::http_jabber_pubsub_publish_options},
    {R"(http://jabber.org/protocol/pubsub#publisher-affiliation)",IntFromString::http_jabber_pubsub_publisher_affiliation},
    {R"(http://jabber.org/protocol/pubsub#purge-nodes)",IntFromString::http_jabber_pubsub_purge_nodes},
    {R"(http://jabber.org/protocol/pubsub#retract-items)",IntFromString::http_jabber_pubsub_retract_items},
    {R"(http://jabber.org/protocol/pubsub#retrieve-affiliations)",IntFromString::http_jabber_pubsub_retrieve_affiliations},
    {R"(http://jabber.org/protocol/pubsub#retrieve-default)",IntFromString::http_jabber_pubsub_retrieve_default},
    {R"(http://jabber.org/protocol/pubsub#retrieve-items)",IntFromString::http_jabber_pubsub_retrieve_items},
    {R"(http://jabber.org/protocol/pubsub#retrieve-subscriptions)",IntFromString::http_jabber_pubsub_retrieve_subscriptions},
    {R"(http://jabber.org/protocol/pubsub#subscribe)",IntFromString::http_jabber_pubsub_subscribe},
    {R"(http://jabber.org/protocol/pubsub#subscription-options)",IntFromString::http_jabber_pubsub_subscribtion_options},
    {R"(http://jabber.org/protocol/pubsub#subscription-notifications)",IntFromString::http_jabber_pubsub_subscription_notifications},
    {R"(http://jabber.org/protocol/rosterx)",IntFromString::http_jabber_rosterx},
    {R"(http://jabber.org/protocol/sipub)",IntFromString::http_jabber_sipub},
    {R"(http://jabber.org/protocol/soap)",IntFromString::http_jabber_soap},
    {R"(http://jabber.org/protocol/soap#fault)",IntFromString::http_jabber_soap_fault},
    {R"(http://jabber.org/protocol/waitinglist)",IntFromString::http_jabber_waitinglist},
    {R"(http://jabber.org/protocol/waitinglist/schemes/mailto)",IntFromString::http_jabber_waitinglist_schemes_mailto},
    {R"(http://jabber.org/protocol/waitinglist/schemes/tel)",IntFromString::http_jabber_waitinglist_scheme_tel},
    {R"(http://jabber.org/protocol/xhtml-im)",IntFromString::http_jabber_xhtml_im},
    {R"(http://jabber.org/protocol/xdata-layout)",IntFromString::http_jabber_xdata_layout},
    {R"(http://jabber.org/protocol/xdata-validate)",IntFromString::http_jabber_xdata_validate},
    {R"(ipv6)",IntFromString::ipv6},
    {R"(jabber:client)",IntFromString::jabber_client},
    {R"(jabber:component:accept)",IntFromString::jabber_component_accept},
    {R"(jabber:component:connect)",IntFromString::jabber_component_connect},
    {R"(jabber:iq:auth)",IntFromString::jabber_iq_auth},
    {R"(jabber:iq:gateway)",IntFromString::jabber_iq_gateway},
    {R"(jabber:iq:last)",IntFromString::jabber_iq_last},
    {R"(jabber:iq:oob)",IntFromString::jabber_iq_oob},
    {R"(jabber:iq:privacy)",IntFromString::jabber_iq_privacy},
    {R"(jabber:iq:private)",IntFromString::jabber_iq_private},
    {R"(jabber:iq:register)",IntFromString::jabber_iq_register},
    {R"(jabber:iq:roster)",IntFromString::jabber_iq_roster},
    {R"(jabber:iq:rpc)",IntFromString::jabber_iq_rpc},
    {R"(jabber:iq:search)",IntFromString::jabber_iq_search},
    {R"(jabber:iq:version)",IntFromString::jabber_iq_search},
    {R"(jabber:server)",IntFromString::jabber_server},
    {R"(jabber:x:data)",IntFromString::jabber_x_data},
    {R"(jabber:x:encrypted)",IntFromString::jabber_x_encrypted},
    {R"(jabber:x:oob)",IntFromString::jabber_x_oob},
    {R"(jabber:x:signed)",IntFromString::jabber_x_signed},
    {R"(msglog)",IntFromString::msglog},
    {R"(msgoffline)",IntFromString::msgoffline},
    {R"(muc_hidden)",IntFromString::muc_hidden},
    {R"(muc_membersonly)",IntFromString::muc_membersonly},
    {R"(muc_moderated)",IntFromString::muc_moderated},
    {R"(muc_nonanonymous)",IntFromString::muc_nonanonymous},
    {R"(muc_open)",IntFromString::muc_open},
    {R"(muc_passwordprotected)",IntFromString::muc_passwordprotected},
    {R"(muc_persistent)",IntFromString::muc_persistent},
    {R"(muc_public)",IntFromString::muc_public},
    {R"(muc_rooms)",IntFromString::muc_rooms},
    {R"(muc_semianonymous)",IntFromString::muc_semianonymous},
    {R"(muc_temporary)",IntFromString::muc_temporary},
    {R"(muc_unmoderated)",IntFromString::muc_unmoderated},
    {R"(muc_unsecured)",IntFromString::muc_unsecured},
    {R"(roster:dlimiter)",IntFromString::roster_delimiter},
    {R"(sslc2s)",IntFromString::sslc2s},
    {R"(stringprep)",IntFromString::stringprep},
    {R"(urn:ietf:params:ns:xmpp-bind)",IntFromString::ns_xml_xmpp_bind},
    {R"(urn:ietf:params:ns:xmpp-e2e)",IntFromString::ns_xml_xmpp_e2e},
    {R"(urn:ietf:params:ns:xmpp-sasl)",IntFromString::ns_xml_xmpp_sasl},
    {R"(urn:ietf:params:ns:xmpp-sasl#c2s)",IntFromString::ns_xml_xmpp_sasl_c2s},
    {R"(urn:ietf:params:ns:xmpp-sasl#s2s)",IntFromString::ns_xml_xmpp_sasl_s2s},
    {R"(urn:ietf:params:ns:xmpp-session)",IntFromString::ns_xml_xmpp_session},
    {R"(urn:ietf:params:ns:xmpp-stanzas)",IntFromString::ns_xml_xmpp_stanzas},
    {R"(urn:ietf:params:ns:xmpp-streams)",IntFromString::ns_xml_xmpp_streams},
    {R"(urn:ietf:params:ns:xmpp-tls)",IntFromString::ns_xml_xmpp_tls},
    {R"(urn:ietf:params:ns:xmpp-tls#c2s)",IntFromString::ns_xml_xmpp_tls_c2s},
    {R"(urn:ietf:params:ns:xmpp-tls#s2s)",IntFromString::ns_xml_xmpp_tls_s2s},
    {R"(urn:ietf:rfc:3264)",IntFromString::ns_rfc_3264},
    {R"(urn:xmpp:archive:auto)",IntFromString::ns_xmpp_archive_auto},
    {R"(urn:xmpp:archive:manage)",IntFromString::ns_xmpp_archive_manage},
    {R"(urn:xmpp:archive:manual)",IntFromString::ns_xmpp_archive_manual},
    {R"(urn:xmpp:archive:pref)",IntFromString::ns_xmpp_archive_pref},
    {R"(urn:xmpp:avatar:data)",IntFromString::ns_xmpp_avatar_data},
    {R"(urn:xmpp:avatar:metadata)",IntFromString::ns_xmpp_avatar_metadata},
    {R"(urn:xmpp:delay)",IntFromString::ns_xmpp_delay},
    {R"(urn:xmpp:jingle:apps:rtp:audio)",IntFromString::ns_xmpp_jingle_apps_rtp_audio},
    {R"(urn:xmpp:jingle:apps:rtp:video)",IntFromString::ns_xmpp_jingle_apps_rtp_video},
    {R"(urn:xmpp:ping)",IntFromString::ns_xmpp_ping},
    {R"(urn:xmpp:receipts)",IntFromString::ns_xmpp_receipts},
    {R"(urn:xmpp:ssn)",IntFromString::ns_xmpp_ssn},
    {R"(urn:xmpp:time)",IntFromString::ns_xmpp_time},
    {R"(xmllang)",IntFromString::xmllang},
    {R"(vcard-temp)",IntFromString::vcard_temp},
    {R"(urn:xmpp:styling:0)",IntFromString::ns_xmpp_styling_0},
    {R"(urn:xmpp:sid:0)",IntFromString::ns_xmpp_sid_0},
    {R"(urn:xmpp:caps)",IntFromString::ns_xmpp_caps},
    {R"(urn:xmpp:caps:optimize)",IntFromString::ns_xmpp_caps_optimize},
};

IntFromString word2int(const QByteArray& word){
    static const auto end = map_word2int.end();
    auto it = map_word2int.constFind(word);
    if(it != end){
        return it.value();
    }else{
        return IntFromString::invalid;
    }
}
